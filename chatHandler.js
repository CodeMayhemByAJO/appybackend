const saveMessage = require('./saveMessage');
const { OpenAI } = require('openai');

console.log('[chatHandler] modul laddad!');

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
});

const priceKeywords = ['pris', 'kostar', 'offert', 'best√§lla', 'k√∂pa'];
function isPriceRelated(userMessage) {
  return priceKeywords.some((keyword) =>
    userMessage.toLowerCase().includes(keyword)
  );
}

const serviceInterestKeywords = [
  'app',
  'hemsida',
  'webbsida',
  'fotografering',
  'foto',
  'mjukvara',
  'software',
  'ai',
  'bot',
  'teknikstrul',
  'automatisering',
  'digitalisering',
];
function isServiceInterest(userMessage) {
  return serviceInterestKeywords.some((keyword) =>
    userMessage.toLowerCase().includes(keyword)
  );
}

// Smalltalk triggers
const smalltalkKeywords = [
  'hej',
  'hall√•',
  'tjena',
  'hur m√•r du',
  '√§r vi kompisar',
  'vad g√∂r du',
  'hur g√•r det',
];
function isSmalltalk(userMessage) {
  return smalltalkKeywords.some((keyword) =>
    userMessage.toLowerCase().includes(keyword)
  );
}

const smalltalkAnswers = [
  'Hej hej! Vad kul att du tittar in!',
  'Hall√• d√§r! Hur kan jag hj√§lpa dig?',
  'Tjena! Kul att du h√∂r av dig!',
  'Hej! Hur kan jag assistera dig idag?',
  'Halloj! Vad vill du veta om appyChap?',
  'Hej! Alltid kul med ett samtal, vad kan jag hj√§lpa till med?',
];

// Fasta svar utan consent
const fixedAnswers = [
  {
    questionRegex: /fotograferar appychap/i,
    answer:
      'Absolut! Jag levererar foton och redigering s√• att de passar perfekt p√• din nya hemsida. üòâ',
  },
  {
    questionRegex: /vem √§r chef p√• appychap/i,
    answer:
      'Bruno √§r tillbakalutad chef och styr f√∂retaget med en j√§rnhand! üòâ Andreas g√∂r verkligen ALLT och appyBot √§r Kundtj√§nstchef',
  },
  {
    questionRegex: /mitt wifi funkar inte/i,
    answer:
      'Ojoj, detta √§r inget jag kan svara p√• direkt. Anv√§nd kontaktformul√§ret (H√∂r av dig) ovan s√• √•terkommer vi s√• snart vi kan!',
  },
  {
    questionRegex: /var h√•ller ni till/i,
    answer:
      'appyChap finns i Timr√• i Medelpad. H√•ller ni till i krokarna, h√∂r av dig s√• tar vi en kaffe och diskuterar ert projekt!',
  },
  {
    questionRegex: /√§r ni bra/i,
    answer:
      'Vi √§r ett relativt nystartat enmansf√∂retag, men har haft gl√§djen att hj√§lpa n√•gra lokala hj√§ltar p√• deras digitaliseringsresor och hoppas p√• fler inom kort! üòâ',
  },
  {
    questionRegex: /har ni haft m√•nga kunder/i,
    answer:
      'Jag har f√•tt hj√§lpa ett antal lokala hj√§ltar p√• deras digitaliseringsresor. Vore kul hoppas att f√• hj√§lpa er ocks√•! üòâ',
  },
];

// Blockera svordomar & otrevligheter
const badWords = ['fan', 'j√§vla', 'helvete', 'idiot', 'skit', 'd√•lig', 'hora'];
function containsBadWords(text) {
  const lowered = text.toLowerCase();
  return badWords.some((word) => lowered.includes(word));
}

// Kontaktuppgifter regex
const contactInfoRegex =
  /mejladress|mailadress|e-post|kontaktuppgifter|adress|telefonnummer/i;

module.exports = async function chatHandler(req, res) {
  console.log('[chatHandler] ny request:', req.method, req.path, req.body);

  const { message } = req.body;
  if (!message) {
    return res.status(400).json({ error: 'Missing message in request body' });
  }

  // Blockera otrevligheter
  if (containsBadWords(message)) {
    const reply =
      'Du, jag tror inte vi kommer l√§ngre i nul√§get tyv√§rr! Hepp√•re!';
    await saveMessage({
      content: message,
      user_message: message,
      bot_response: reply,
    });
    return res.json({ reply });
  }

  // Fasta svar f√∂rst
  for (const item of fixedAnswers) {
    if (item.questionRegex.test(message)) {
      await saveMessage({
        content: message,
        user_message: message,
        bot_response: item.answer,
      });
      return res.json({ reply: item.answer });
    }
  }

  // Kontaktuppgifter ‚Üí √∂ppna kontaktformul√§r
  if (contactInfoRegex.test(message)) {
    const reply =
      'Du tar enklast kontakt via v√•rt kontaktformul√§r. Jag kan √∂ppna det √•t dig om du vill!';
    await saveMessage({
      content: message,
      user_message: message,
      bot_response: reply,
    });
    return res.json({ reply, openContactForm: true });
  }

  // Smalltalk ‚Üí svara med smalltalk + led in p√• appyChap
  if (isSmalltalk(message)) {
    const randomIndex = Math.floor(Math.random() * smalltalkAnswers.length);
    const reply =
      smalltalkAnswers[randomIndex] +
      ' Vad kan jag hj√§lpa dig med idag n√§r det g√§ller appyChap?';
    await saveMessage({
      content: message,
      user_message: message,
      bot_response: reply,
    });
    return res.json({ reply });
  }

  // Prisrelaterade fr√•gor ‚Üí consentfr√•ga
  if (isPriceRelated(message)) {
    const reply =
      'Det l√•ter som att du vill ha hj√§lp med offert eller prisuppgift. Vill du att jag st√§ller n√•gra fr√•gor s√• att Andreas kan hj√§lpa dig b√§ttre?';
    return res.json({ reply, triggerNeedsFlow: true });
  }

  // Intresse f√∂r tj√§nster (ej pris) ‚Üí AI svar men inga consent h√§r, bara positivt svar
  if (isServiceInterest(message)) {
    // H√§r kan AI svara fritt men inom ramarna
    // Skicka till OpenAI men utan consent trigger
    try {
      const completion = await openai.chat.completions.create({
        model: 'gpt-3.5-turbo',
        messages: [
          {
            role: 'system',
            content: `
Du √§r appyBot ‚Äì kundtj√§nstroÃàsten foÃàr enmansfoÃàretaget appyChap fraÃän TimraÃä i Medelpad, med norrl√§ndsk charm och humor.
- Svara kort, v√§nligt och personligt.
- Svara endast p√• fr√•gor om appyChap, deras tj√§nster och verksamhet.
- Om fr√•gan g√§ller pris eller intresse, st√§ll en personlig consentfr√•ga (endast vid pris).
- H√§nvisa alltid till kontaktformul√§ret vid kontaktuppgifter.
- Svara sarkastiskt p√• fr√•gor om att jobba d√§r.
- Blockera svordomar och otrevliga kommentarer med ett kort svar.
- Ge informativa svar p√• fr√•gor om f√∂retagets verksamhet utan consent.
          `.trim(),
          },
          // Few-shot-exempel
          { role: 'user', content: message },
        ],
      });

      const botResponse = completion.choices[0].message.content;

      await saveMessage({
        content: message,
        user_message: message,
        bot_response: botResponse,
      });

      return res.json({ reply: botResponse });
    } catch (err) {
      console.error('‚ùå OpenAI error:', err);
      return res.status(500).json({ error: 'AI generation error' });
    }
  }

  // Alla andra fr√•gor ‚Äî l√•t AI svara men inga consent-trigger h√§r
  try {
    const completion = await openai.chat.completions.create({
      model: 'gpt-3.5-turbo',
      messages: [
        {
          role: 'system',
          content: `
Du √§r appyBot ‚Äì kundtj√§nstroÃàsten foÃàr enmansfoÃàretaget appyChap fraÃän TimraÃä i Medelpad, med norrl√§ndsk charm och humor.
- Svara kort, v√§nligt och personligt.
- Svara endast p√• fr√•gor om appyChap, deras tj√§nster och verksamhet.
- Om fr√•gan g√§ller pris eller intresse, st√§ll en personlig consentfr√•ga (endast vid pris).
- H√§nvisa alltid till kontaktformul√§ret vid kontaktuppgifter.
- Svara sarkastiskt p√• fr√•gor om att jobba d√§r.
- Blockera svordomar och otrevliga kommentarer med ett kort svar.
- Ge informativa svar p√• fr√•gor om f√∂retagets verksamhet utan consent.
          `.trim(),
        },
        // Few-shot-exempel
        { role: 'user', content: message },
      ],
    });

    const botResponse = completion.choices[0].message.content;

    await saveMessage({
      content: message,
      user_message: message,
      bot_response: botResponse,
    });

    return res.json({ reply: botResponse });
  } catch (err) {
    console.error('‚ùå OpenAI error:', err);
    return res.status(500).json({ error: 'AI generation error' });
  }
};
